## üîç usb_detector.py ‚Äî D√©tection avanc√©e (niveau expert)

Ce script Python utilise la biblioth√®que `pyudev` pour surveiller en temps r√©el les connexions de p√©riph√©riques USB physiques.

### Fonctionnalit√©s :
- D√©tection en direct d‚Äôune cl√© USB ins√©r√©e (`device.action == 'add'`)
- Identification du nom du p√©riph√©rique
- Lecture du contenu si le p√©riph√©rique est mont√©
- Affichage d‚Äôun message si la cl√© est d√©tect√©e mais non mont√©e

üìå **Remarque :** Ce script **n√©cessite une cl√© USB r√©elle branch√©e**.  
Il **ne peut pas √™tre test√©** dans un environnement virtualis√© ou Check Pass (pas d‚Äôacc√®s au mat√©riel physique).

#!/usr/bin/env python3
import pyudev
import os

context = pyudev.Context()
monitor = pyudev.Monitor.from_netlink(context)
monitor.filter_by(subsystem='block', device_type='partition')

print("üïµÔ∏è En attente d‚Äôune cl√© USB... (CTRL+C pour quitter)")

for device in iter(monitor.poll, None):
    if device.action == 'add':
        device_node = device.device_node
        device_name = os.path.basename(device_node)

        mount_point = None
        with open('/proc/mounts', 'r') as f:
            for line in f:
                if device_node in line:
                    mount_point = line.split()[1]
                    break

        if mount_point:
            print(f"\n‚úÖ Cl√© USB d√©tect√©e : {device_name}")
            print(f"üìÇ Contenu de {mount_point} :")
            for root, dirs, files in os.walk(mount_point):
                for file in files:
                    print(f"- {os.path.join(root, file)}")
        else:
            print(f"\n‚ö†Ô∏è Cl√© d√©tect√©e ({device_name}) mais non mont√©e.")